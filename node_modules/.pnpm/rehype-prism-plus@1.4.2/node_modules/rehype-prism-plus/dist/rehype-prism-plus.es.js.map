{"version":3,"file":"rehype-prism-plus.es.js","sources":["../src/generator.js","../src/common.js","../src/all.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef Options options\n *   Configuration.\n * @property {boolean} [showLineNumbers]\n *   Set `showLineNumbers` to `true` to always display line number\n * @property {boolean} [ignoreMissing]\n *   Set `ignoreMissing` to `true` to ignore unsupported languages and line highlighting when no language is specified\n */\n\nimport { visit } from 'unist-util-visit'\nimport { toString } from 'hast-util-to-string'\nimport { filter } from 'unist-util-filter'\nimport rangeParser from 'parse-numeric-range'\n\n/**\n * @param {Element} node\n * @return {string|null}\n */\nconst getLanguage = (node) => {\n  const className = node.properties.className\n  //@ts-ignore\n  for (const classListItem of className) {\n    if (classListItem.slice(0, 9) === 'language-') {\n      return classListItem.slice(9).toLowerCase()\n    }\n  }\n  return null\n}\n\n/**\n * Create a closure that determines if we have to highlight the given index\n *\n * @param {string} meta\n * @return { (index:number) => boolean }\n */\nconst calculateLinesToHighlight = (meta) => {\n  const RE = /{([\\d,-]+)}/\n  // Remove space between {} e.g. {1, 3}\n  const parsedMeta = meta\n    .split(',')\n    .map((str) => str.trim())\n    .join()\n  if (RE.test(parsedMeta)) {\n    const strlineNumbers = RE.exec(parsedMeta)[1]\n    const lineNumbers = rangeParser(strlineNumbers)\n    return (index) => lineNumbers.includes(index + 1)\n  } else {\n    return () => false\n  }\n}\n\nconst recursivelyStripPositions = (node) => {\n  delete node.position\n\n  if (!node.children || node.children.length === 0) return node\n\n  node.children = node.children.map((x) => recursivelyStripPositions(x))\n\n  return node\n}\n\n/**\n * Check if we want to start the line numbering from a given number or 1\n * showLineNumbers=5, will start the numbering from 5\n * @param {string} meta\n * @returns {number}\n */\nconst calculateStartingLine = (meta) => {\n  const RE = /showLineNumbers=(?<lines>\\d+)/i\n  // pick the line number after = using a named capturing group\n  if (RE.test(meta)) {\n    const {\n      groups: { lines },\n    } = RE.exec(meta)\n    return Number(lines)\n  }\n  return 1\n}\n\n/**\n * Create container AST for node lines\n *\n * @param {number} number\n * @return {Element[]}\n */\nconst createLineNodes = (number) => {\n  const a = new Array(number)\n  for (let i = 0; i < number; i++) {\n    a[i] = {\n      type: 'element',\n      tagName: 'span',\n      properties: { className: [] },\n      children: [],\n    }\n  }\n  return a\n}\n\n/**\n * Split multiline text nodes into individual nodes with positioning\n * Add a node start and end line position information for each text node\n *\n * @return { (ast:Element['children']) => Element['children'] }\n *\n */\nconst addNodePositionClosure = () => {\n  let startLineNum = 1\n  /**\n   * @param {Element['children']} ast\n   * @return {Element['children']}\n   */\n  const addNodePosition = (ast) => {\n    return ast.reduce((result, node) => {\n      if (node.type === 'text') {\n        const value = /** @type {string} */ (node.value)\n        const numLines = (value.match(/\\n/g) || '').length\n        if (numLines === 0) {\n          node.position = {\n            // column: 0 is to make the ts compiler happy but we do not use this field\n            start: { line: startLineNum, column: 0 },\n            end: { line: startLineNum, column: 0 },\n          }\n          result.push(node)\n        } else {\n          const lines = value.split('\\n')\n          for (const [i, line] of lines.entries()) {\n            result.push({\n              type: 'text',\n              value: i === lines.length - 1 ? line : line + '\\n',\n              position: {\n                start: { line: startLineNum + i },\n                end: { line: startLineNum + i },\n              },\n            })\n          }\n        }\n        startLineNum = startLineNum + numLines\n\n        return result\n      }\n\n      if (Object.prototype.hasOwnProperty.call(node, 'children')) {\n        const initialLineNum = startLineNum\n        // @ts-ignore\n        node.children = addNodePosition(node.children, startLineNum)\n        result.push(node)\n        node.position = {\n          start: { line: initialLineNum, column: 0 },\n          end: { line: startLineNum, column: 0 },\n        }\n        return result\n      }\n\n      result.push(node)\n      return result\n    }, [])\n  }\n  return addNodePosition\n}\n\n/**\n * Rehype prism plugin generator that highlights code blocks with refractor (prismjs)\n *\n * Pass in your own refractor object with the required languages registered:\n * https://github.com/wooorm/refractor#refractorregistersyntax\n *\n * @param {import('refractor/lib/core').Refractor} refractor\n * @return {import('unified').Plugin<[Options?], Root>}\n */\nconst rehypePrismGenerator = (refractor) => {\n  return (options = {}) => {\n    return (tree) => {\n      visit(tree, 'element', visitor)\n    }\n\n    /**\n     * @param {Element} node\n     * @param {number} index\n     * @param {Element} parent\n     */\n    function visitor(node, index, parent) {\n      if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n        return\n      }\n\n      let meta = node.data && node.data.meta ? /** @type {string} */ (node.data.meta) : ''\n      // Coerce className to array\n      if (node.properties.className) {\n        if (typeof node.properties.className === 'boolean') {\n          node.properties.className = []\n        } else if (!Array.isArray(node.properties.className)) {\n          node.properties.className = [node.properties.className]\n        }\n      } else {\n        node.properties.className = []\n      }\n      node.properties.className.push('code-highlight')\n      const lang = getLanguage(node)\n\n      /** @type {Element} */\n      let refractorRoot\n\n      // Syntax highlight\n      if (lang) {\n        try {\n          // @ts-ignore\n          refractorRoot = refractor.highlight(toString(node), lang)\n          // @ts-ignore className is already an array\n          parent.properties.className = (parent.properties.className || []).concat(\n            'language-' + lang\n          )\n        } catch (err) {\n          if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n            refractorRoot = node\n          } else {\n            throw err\n          }\n        }\n      } else {\n        refractorRoot = node\n      }\n\n      refractorRoot.children = addNodePositionClosure()(refractorRoot.children)\n\n      // Add position info to root\n      if (refractorRoot.children.length > 0) {\n        refractorRoot.position = {\n          start: { line: refractorRoot.children[0].position.start.line, column: 0 },\n          end: {\n            line: refractorRoot.children[refractorRoot.children.length - 1].position.end.line,\n            column: 0,\n          },\n        }\n      } else {\n        refractorRoot.position = {\n          start: { line: 0, column: 0 },\n          end: { line: 0, column: 0 },\n        }\n      }\n\n      const shouldHighlightLine = calculateLinesToHighlight(meta)\n      const startingLineNumber = calculateStartingLine(meta)\n      const codeLineArray = createLineNodes(refractorRoot.position.end.line)\n\n      const falseShowLineNumbersStr = [\n        'showlinenumbers=false',\n        'showlinenumbers=\"false\"',\n        'showlinenumbers={false}',\n      ]\n      for (const [i, line] of codeLineArray.entries()) {\n        // Default class name for each line\n        line.properties.className = ['code-line']\n\n        // Syntax highlight\n        const treeExtract = filter(\n          refractorRoot,\n          (node) => node.position.start.line <= i + 1 && node.position.end.line >= i + 1\n        )\n        line.children = treeExtract.children\n\n        // Line number\n        if (\n          (meta.toLowerCase().includes('showLineNumbers'.toLowerCase()) ||\n            options.showLineNumbers) &&\n          !falseShowLineNumbersStr.some((str) => meta.toLowerCase().includes(str))\n        ) {\n          line.properties.line = [(i + startingLineNumber).toString()]\n          line.properties.className.push('line-number')\n        }\n\n        // Line highlight\n        if (shouldHighlightLine(i)) {\n          line.properties.className.push('highlight-line')\n        }\n\n        // Diff classes\n        if (lang === 'diff' && toString(line).substring(0, 1) === '-') {\n          line.properties.className.push('deleted')\n        } else if (lang === 'diff' && toString(line).substring(0, 1) === '+') {\n          line.properties.className.push('inserted')\n        }\n      }\n\n      // Remove possible trailing line when splitting by \\n which results in empty array\n      if (\n        codeLineArray.length > 0 &&\n        toString(codeLineArray[codeLineArray.length - 1]).trim() === ''\n      ) {\n        codeLineArray.pop()\n      }\n\n      node.children = codeLineArray\n\n      // Removing remnant positions info as it causes some problems in @next/mdx\n      // https://github.com/timlrx/rehype-prism-plus/issues/44\n      recursivelyStripPositions(node)\n    }\n  }\n}\n\nexport default rehypePrismGenerator\n","import { refractor as refractorCommon } from 'refractor/lib/common.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * Supported languages: https://github.com/wooorm/refractor#data\n *\n * Consider using rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismCommon = rehypePrismGenerator(refractorCommon)\n\nexport default rehypePrismCommon\n","import { refractor as refractorAll } from 'refractor/lib/all.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * This supports all the languages and should be used on the server side.\n *\n * Consider using rehypePrismCommon or rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismAll = rehypePrismGenerator(refractorAll)\n\nexport default rehypePrismAll\n"],"names":["recursivelyStripPositions","node","position","children","length","map","x","rehypePrismGenerator","refractor","options","tree","visit","visitor","index","parent","tagName","meta","data","properties","className","Array","isArray","push","refractorRoot","startLineNum","lang","classListItem","slice","toLowerCase","getLanguage","highlight","toString","concat","err","ignoreMissing","test","message","addNodePosition","ast","reduce","result","type","value","numLines","match","start","line","column","end","lines","split","entries","i","Object","prototype","hasOwnProperty","call","initialLineNum","shouldHighlightLine","RE","parsedMeta","str","trim","join","strlineNumbers","exec","lineNumbers","rangeParser","includes","calculateLinesToHighlight","startingLineNumber","Number","groups","calculateStartingLine","codeLineArray","number","a","createLineNodes","falseShowLineNumbersStr","treeExtract","filter","showLineNumbers","some","substring","pop","rehypePrismCommon","refractorCommon","rehypePrismAll","refractorAll"],"mappings":"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"}