{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/lib/remark-img-to-jsx.ts"],
  "sourcesContent": ["import {\r\n  ComputedFields,\r\n  defineDocumentType,\r\n  makeSource,\r\n} from \"contentlayer/source-files\";\r\n\r\nimport readingTime from \"reading-time\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport rehypeCodeTitles from \"rehype-code-titles\";\r\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\r\nimport rehypePrism from \"rehype-prism-plus\";\r\nimport rehypeKatex from \"rehype-katex\";\r\nimport remarkMath from \"remark-math\";\r\nimport remarkImgToJsx from \"./src/lib/remark-img-to-jsx\";\r\n\r\nconst computedFields: ComputedFields = {\r\n  readingTime: { type: \"json\", resolve: (doc) => readingTime(doc.body.raw) },\r\n  slug: {\r\n    type: \"string\",\r\n    resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\r\n  },\r\n};\r\n\r\nconst Post = defineDocumentType(() => ({\r\n  name: \"Post\",\r\n  filePathPattern: \"post/**/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    date: { type: \"string\", required: true },\r\n    summary: { type: \"string\", required: true },\r\n    image: { type: \"string\", required: false },\r\n    draft: { type: \"boolean\", required: false },\r\n    tags: {\r\n      type: \"list\",\r\n      of: {\r\n        type: \"string\",\r\n      },\r\n      default: [\"linh tinh\"],\r\n      description: \"Tags for the post\",\r\n      required: false,\r\n    },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nconst Snippet = defineDocumentType(() => ({\r\n  name: \"Snippet\",\r\n  filePathPattern: \"snippets/**/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    date: { type: \"string\", required: true },\r\n    description: { type: \"string\", required: true },\r\n    logo: { type: \"string\", required: true },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nconst Page = defineDocumentType(() => ({\r\n  name: \"Page\",\r\n  filePathPattern: \"pages/*.mdx\",\r\n  contentType: \"mdx\",\r\n  fields: {\r\n    title: { type: \"string\", required: true },\r\n    description: { type: \"string\", required: true },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nconst contentLayerConfig = makeSource({\r\n  contentDirPath: \"data\",\r\n  documentTypes: [Post, Snippet, Page],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm, remarkMath, remarkImgToJsx],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      rehypeCodeTitles,\r\n      rehypePrism,\r\n      rehypeKatex,\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: [\"anchor\"],\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});\r\n\r\nexport default contentLayerConfig;\r\n", "import { visit } from \"unist-util-visit\";\r\nimport sizeOf from \"image-size\";\r\nimport fs from \"fs\";\r\n\r\nexport default function remarkImgToJsx() {\r\n  return (tree: any) => {\r\n    visit(\r\n      tree,\r\n      // only visit p tags that contain an img element\r\n      (node: any) =>\r\n        node.type === \"paragraph\" &&\r\n        node.children.some((n: any) => n.type === \"image\"),\r\n      (node: any) => {\r\n        const imageNode = node.children.find((n: any) => n.type === \"image\");\r\n\r\n        // only local files\r\n        if (fs.existsSync(`${process.cwd()}/public${imageNode.url}`)) {\r\n          const dimensions = sizeOf(`${process.cwd()}/public${imageNode.url}`);\r\n\r\n          // Convert original node to next/image\r\n          (imageNode.type = \"mdxJsxFlowElement\"),\r\n            (imageNode.name = \"Image\"),\r\n            (imageNode.attributes = [\r\n              { type: \"mdxJsxAttribute\", name: \"alt\", value: imageNode.alt },\r\n              { type: \"mdxJsxAttribute\", name: \"src\", value: imageNode.url },\r\n              {\r\n                type: \"mdxJsxAttribute\",\r\n                name: \"width\",\r\n                value: dimensions.width,\r\n              },\r\n              {\r\n                type: \"mdxJsxAttribute\",\r\n                name: \"height\",\r\n                value: dimensions.height,\r\n              },\r\n            ]);\r\n\r\n          // Change node type from p to div to avoid nesting error\r\n          node.type = \"div\";\r\n          node.children = [imageNode];\r\n        }\r\n      }\r\n    );\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
